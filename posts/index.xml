<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Edison's blog | Java Developer</title><link>https://Edisonzjs.github.io/posts/</link><description>Recent content in Posts on Edison's blog | Java Developer</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 14 Mar 2020 10:37:45 +0800</lastBuildDate><atom:link href="https://Edisonzjs.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Redis 跳跃表</title><link>https://Edisonzjs.github.io/2020/03/redis-skiplist/</link><pubDate>Sat, 14 Mar 2020 10:37:45 +0800</pubDate><guid>https://Edisonzjs.github.io/2020/03/redis-skiplist/</guid><description>概述 Redis使用跳跃表作为有序集合键的底层实现之一，如果一个有序集合包含的元素数量较多，或者有序集合中元素的成员是比较长的字符串时，Red</description></item><item><title>字典</title><link>https://Edisonzjs.github.io/2020/03/reds-dict/</link><pubDate>Wed, 11 Mar 2020 14:34:43 +0800</pubDate><guid>https://Edisonzjs.github.io/2020/03/reds-dict/</guid><description>1.字典的实现 redis中的字典是一种用于保存键值对映射关系的抽象数据结构，字典中每一个键都是独一无二的，可以根据键来操作与之关联的值。 re</description></item><item><title>SDS</title><link>https://Edisonzjs.github.io/2020/02/redis-sds/</link><pubDate>Mon, 17 Feb 2020 14:34:43 +0800</pubDate><guid>https://Edisonzjs.github.io/2020/02/redis-sds/</guid><description>1.何为SDS redis使用一种名为简单动态字符串(simple dynamic string，简称SDS)的抽象类型，并将SDS用作redis的默认字符串</description></item><item><title>五种IO模型</title><link>https://Edisonzjs.github.io/2020/01/io-model/</link><pubDate>Sun, 19 Jan 2020 11:18:28 +0800</pubDate><guid>https://Edisonzjs.github.io/2020/01/io-model/</guid><description>1.用户空间和内核空间 现代操作系统都是采用虚拟存储器，那么对 32 位操作系统而言，它的寻址空间（虚拟存储空间）为 4G（2 的 32 次方）。操作系统的核</description></item><item><title>深拷贝VS浅拷贝</title><link>https://Edisonzjs.github.io/2020/01/deepcopy-shallowcopy/</link><pubDate>Fri, 17 Jan 2020 12:51:16 +0800</pubDate><guid>https://Edisonzjs.github.io/2020/01/deepcopy-shallowcopy/</guid><description>1.什么是浅拷贝 浅拷贝是按位拷贝，它会创建一个新的对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值</description></item><item><title>值传递？引用传递？</title><link>https://Edisonzjs.github.io/2020/01/pass-by-val/</link><pubDate>Thu, 16 Jan 2020 22:24:35 +0800</pubDate><guid>https://Edisonzjs.github.io/2020/01/pass-by-val/</guid><description>1.什么是值传递和引用传递 在探讨这个问题之前，应先搞清楚什么是值传递和引用传递以及它们之间的区别。 值传递：在方法被调用时，实参通过形参把它的</description></item><item><title>[LeetCode] 链表</title><link>https://Edisonzjs.github.io/2020/01/leetecode-list/</link><pubDate>Wed, 15 Jan 2020 20:31:40 +0800</pubDate><guid>https://Edisonzjs.github.io/2020/01/leetecode-list/</guid><description>声明：下面的所有代码都基于此链表类 1 2 3 4 public class ListNode { int data; ListNode next; } 1.删除某个节点 Question：给定一个链表，删除链表的倒数第n个节点，并返回</description></item><item><title>AQS</title><link>https://Edisonzjs.github.io/2020/01/aqs/</link><pubDate>Tue, 07 Jan 2020 15:17:40 +0800</pubDate><guid>https://Edisonzjs.github.io/2020/01/aqs/</guid><description>1.AQS简介与原理阐述 AQS(AbstractQueuedSynchronizer)是一个用来构建锁和同步器的框架，它内部使用了一个int</description></item></channel></rss>