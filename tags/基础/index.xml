<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>基础 on Edison's blog | Java Developer</title><link>https://Edisonzjs.github.io/tags/%E5%9F%BA%E7%A1%80/</link><description>Recent content in 基础 on Edison's blog | Java Developer</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 17 Jan 2020 12:51:16 +0800</lastBuildDate><atom:link href="https://Edisonzjs.github.io/tags/%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml"/><item><title>深拷贝VS浅拷贝</title><link>https://Edisonzjs.github.io/2020/01/deepcopy-shallowcopy/</link><pubDate>Fri, 17 Jan 2020 12:51:16 +0800</pubDate><guid>https://Edisonzjs.github.io/2020/01/deepcopy-shallowcopy/</guid><description>1.什么是浅拷贝 浅拷贝是按位拷贝，它会创建一个新的对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值</description></item><item><title>值传递？引用传递？</title><link>https://Edisonzjs.github.io/2020/01/pass-by-val/</link><pubDate>Thu, 16 Jan 2020 22:24:35 +0800</pubDate><guid>https://Edisonzjs.github.io/2020/01/pass-by-val/</guid><description>1.什么是值传递和引用传递 在探讨这个问题之前，应先搞清楚什么是值传递和引用传递以及它们之间的区别。 值传递：在方法被调用时，实参通过形参把它的</description></item></channel></rss>